# Copyright 2022 linjing-lab
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from ._typing import Iterable, List, Callable, Optional, _T, SupportsRichComparison

# Data Generated by Mapping.
def generate(__iterable: List[_T], key: Optional[Callable[[_T], SupportsRichComparison]]=None) -> List[_T]:
    compare: List[_T] = list(map(key, __iterable)) if key != None else __iterable
    return compare

# Uniformly Convert `Iterable` into `List`: Facilitate the Execution of Sorting Algorithms.
def convert(__iterable: Iterable[_T]) -> List[_T]:
    if isinstance(__iterable, (tuple, str, set, dict)):
        return list(__iterable)
    return __iterable